= form_for [:admin, @project], multipart: true, html: { autocomplete: "off" } do |f|
  %header#header
    .breadcrumbs= render_breadcrumbs separator: '<div class="divider"></div>'

    #header_actions
      %button.button.button-primary{ type: 'submit' }
        = icon('check')
        Save project
      = link_to t('spina.cancel'), spina.admin_projects_path, class: 'button button button-secondary'

  - content_for :notification_alert do
    = error_explanation!(@project)

  - if @project.errors.full_messages.any? 
    %p any
  - if @project.errors.empty?
    %p empty 

  #page_content.tab-content.active.well
    .horizontal-form
      .horizontal-form-group
        .horizontal-form-label
          Title
        .horizontal-form-content
          = f.text_field :title
      .horizontal-form-group
        .horizontal-form-label
          Description
        .horizontal-form-content
          = render 'spina/admin/shared/rich_text_field', f: f, field: :description
      .horizontal-form-group
        .horizontal-form-label
          Duration
        .horizontal-form-content
          = f.text_field :duration
      .horizontal-form-group
        .horizontal-form-label
          Completion date
        .horizontal-form-content
          = f.text_field :completion_date, value: (@project.completion_date.try(:strftime, "%d-%m-%Y") unless @project.new_record?), class: 'datepicker'
      .horizontal-form-group
        .horizontal-form-label
          Photos
        .horizontal-form-content
          = link_to spina.photo_collection_select_admin_photos_path(f.object_name, selected_photo_ids: (f.object.photo_collection.photo_ids if f.object.photo_collection_id.present?), hidden_field_id: 'photo_collection_id'), remote: true, class: 'media_picker clearfix' do
            .placeholder.pull-right
              %span.button.button-small.button-round
                %i.icon.icon-dots
                = t 'spina.pages.photos_picker'
          = f.hidden_field :photo_collection_id, data: { hidden_field_id: 'photo_collection_id' }
          = f.fields_for :photo_collection, f.object.photo_collection || f.object.build_photo_collection do |ff|
            = ff.hidden_field :photo_tokens, value: f.object.photo_collection.try(:photo_ids).try(:join,",")
            = ff.hidden_field :photo_positions, value: f.object.photo_collection.try(:photos).try(:sorted_by_photo_collection).try(:pluck, :photo_id).try(:join,","), class: 'photo-positions'

          .photo-collection
            - if f.object.photo_collection.present?
              - if f.object.photo_collection.photos.sorted_by_photo_collection.any?
                = render 'spina/admin/photos/photo_collection', photos: f.object.photo_collection.photos.sorted_by_photo_collection
              - elsif f.object.photo_collection.photos.any?
                = render 'spina/admin/photos/photo_collection', photos: f.object.photo_collection.photos

  - unless @project.new_record?
    .pull-right= link_to t('spina.permanently_delete'), spina.admin_project_path(@project), method: :delete, data: { confirm: t('spina.pages.delete_confirmation', subject: @project.title) }, class: 'button button-link button-danger'
